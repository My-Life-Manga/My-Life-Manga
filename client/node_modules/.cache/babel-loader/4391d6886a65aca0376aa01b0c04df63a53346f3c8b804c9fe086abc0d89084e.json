{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Clav\\\\OneDrive\\\\Desktop\\\\node-raect-template\\\\node-react-template\\\\client\\\\src\\\\components\\\\progress-bar\\\\ProgressBar.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = _ref => {\n  let {\n    progress\n  } = _ref;\n  const progressBarStyles = {\n    width: \"100%\",\n    height: \"20px\",\n    margin: \"10px 0\",\n    borderRadius: \"10px\"\n  };\n  const colorStops = [{\n    percent: 0,\n    color: \"red\"\n  }, {\n    percent: 25,\n    color: \"orange\"\n  }, {\n    percent: 50,\n    color: \"yellowgreen\"\n  }, {\n    percent: 75,\n    color: \"lightgreen\"\n  }, {\n    percent: 100,\n    color: \"green\"\n  }];\n  const findColor = () => {\n    for (let i = 0; i < colorStops.length - 1; i++) {\n      const start = colorStops[i];\n      const end = colorStops[i + 1];\n      if (progress >= start.percent && progress <= end.percent) {\n        const percent = (progress - start.percent) / (end.percent - start.percent);\n        const red = Math.round(parseInt(start.color.slice(0, 2), 16) * (1 - percent) + parseInt(end.color.slice(0, 2), 16) * percent).toString(16);\n        const green = Math.round(parseInt(start.color.slice(2, 4), 16) * (1 - percent) + parseInt(end.color.slice(2, 4), 16) * percent).toString(16);\n        const blue = Math.round(parseInt(start.color.slice(4, 6), 16) * (1 - percent) + parseInt(end.color.slice(4, 6), 16) * percent).toString(16);\n        return `#${red}${green}${blue}`;\n      }\n    }\n    return colorStops[colorStops.length - 1].color;\n  };\n  const progressStyles = {\n    height: \"100%\",\n    lineHeight: \"20px\",\n    textAlign: \"center\",\n    borderRadius: \"10px\",\n    width: `${progress}%`,\n    backgroundColor: findColor(),\n    color: \"white\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: progressBarStyles,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: progressStyles,\n      children: [progress, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = ProgressBar;\nexport default ProgressBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","ProgressBar","progress","progressBarStyles","width","height","margin","borderRadius","colorStops","percent","color","findColor","i","length","start","end","red","Math","round","parseInt","slice","toString","green","blue","progressStyles","lineHeight","textAlign","backgroundColor"],"sources":["C:/Users/Clav/OneDrive/Desktop/node-raect-template/node-react-template/client/src/components/progress-bar/ProgressBar.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ProgressBar = ({ progress }) => {\r\n  const progressBarStyles = {\r\n    width: \"100%\",\r\n    height: \"20px\",\r\n    margin: \"10px 0\",\r\n    borderRadius: \"10px\",\r\n  };\r\n\r\n  const colorStops = [\r\n    { percent: 0, color: \"red\" },\r\n    { percent: 25, color: \"orange\" },\r\n    { percent: 50, color: \"yellowgreen\" },\r\n    { percent: 75, color: \"lightgreen\" },\r\n    { percent: 100, color: \"green\" },\r\n  ];\r\n\r\n  const findColor = () => {\r\n    for (let i = 0; i < colorStops.length - 1; i++) {\r\n      const start = colorStops[i];\r\n      const end = colorStops[i + 1];\r\n      if (progress >= start.percent && progress <= end.percent) {\r\n        const percent = (progress - start.percent) / (end.percent - start.percent);\r\n        const red = Math.round(parseInt(start.color.slice(0, 2), 16) * (1 - percent) + parseInt(end.color.slice(0, 2), 16) * percent).toString(16);\r\n        const green = Math.round(parseInt(start.color.slice(2, 4), 16) * (1 - percent) + parseInt(end.color.slice(2, 4), 16) * percent).toString(16);\r\n        const blue = Math.round(parseInt(start.color.slice(4, 6), 16) * (1 - percent) + parseInt(end.color.slice(4, 6), 16) * percent).toString(16);\r\n        return `#${red}${green}${blue}`;\r\n      }\r\n    }\r\n    return colorStops[colorStops.length - 1].color;\r\n  };\r\n\r\n  const progressStyles = {\r\n    height: \"100%\",\r\n    lineHeight: \"20px\",\r\n    textAlign: \"center\",\r\n    borderRadius: \"10px\",\r\n    width: `${progress}%`,\r\n    backgroundColor: findColor(),\r\n    color: \"white\",\r\n  };\r\n\r\n  return (\r\n    <div style={progressBarStyles}>\r\n      <div style={progressStyles}>{progress}%</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}